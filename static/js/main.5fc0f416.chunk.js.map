{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA2CA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAmB1BC,MA5Cf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAON,EAA4BY,EAA5BZ,OAAQa,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,gBAAgBD,GAC9BJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OACVd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAGnCd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAmBO,MC6BzBI,6MAvDbC,MAAQ,KASRC,cAAgB,WAad,OAZeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GAEnC,OADAC,QAAQC,IAAIF,GAEVrB,EAAAC,EAAAC,cAACsB,EAAD,CACEpB,MAAOiB,EAAMI,cACb3B,OAAQuB,EAAMK,mBACdX,IAAKM,EAAMM,GACXhB,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAUxBgB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,QASbM,SAAW,WACT,OAAOI,MAAM,yDACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFArC5BC,KAAKlB,8CA0CL,OACE5B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,SAAd,wEACCyC,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBArDlC6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.5fc0f416.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// class Movie extends Component {\r\n//   // npm install prop-types 해야함\r\n//   static propTypes = {\r\n//     title: propTypes.string.isRequired,\r\n//     poster: propTypes.string\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <MoviePoster poster={this.props.poster} />\r\n//         <h1>{this.props.title}</h1>;\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 12. app.js에 render_movies를 통해서 전달받은 props데이터중에 title은 jsx h1으로 호출\r\n// 13. app.js에 MoviePoster function에 전달받은 poster props 데이터를 MoviePoster로 전달\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie__Columns\">\r\n        <h1 className=\"movie__title\">{title}</h1>\r\n        <div className=\"movie_genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">{synopsis}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 14 Movie function으로 부터 전달받은 poster props데이터를 img jsx로 return\r\nfunction MoviePoster({ poster, alt }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  poster: propTypes.string.isRequired,\r\n  genres: propTypes.array.isRequired,\r\n  synopsis: propTypes.string.isRequired\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: propTypes.string.isRequired,\r\n  alt: propTypes.string.isRequired\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: propTypes.array.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\n// 모든 컴포넌트는 render function을 갖고있다.\n// render는 뭔가 보여주고 출력하는 기능\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> conponentDidUpdate\n  // 1. state 값 초기화\n  state = {};\n\n  // 2. App render가 된 후에 _getMovies 함수 호출\n  componentDidMount() {\n    this._getMovies();\n  }\n  // 9. movies에 있는 값들을 map메소드를 이용해서 movie와 index로 변환\n  // 10. Movie.js에 Movie function에 title은 movie.title값을 title props로 전달\n  // 11. Movie.js에 Movie function에 poster는 movie.large_cover_image의 값을 poster props로 전달\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie);\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  // 3. movies에 값을 담기위해서 callApi함수 호출\n  // 6. callApi에서 return된 값을 이용해서 movies에 담아준뒤에 setState이용해서 state안에\n  // 7. movies에 담아주면서 바꿔준다.\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  // 4. fetch를 이용해서 api를 받아와서 json 객체로 변환\n  // 5. 변환된 json객체에서 data.movies부분만 return\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating\")\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  // 8. state에 값이 담기면서 app객체안에 renderMovies함수 호출됨\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">상헌이와 떠나는 무비투어</h1>\n        {this.state.movies ? this._renderMovies() : \"loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}